#1
#def InsertionSort(A):
#    for i in range(1, len(A)):
#        key = A[i]
#        j = i - 1
#        while j >= 0 and key < A[j]:
#            A[j + 1] = A[j]
#            j -= 1
#        A[j + 1] = key
#
#s
#n = int(input("Введите количество элементов в списке: "))
#A = []
#for _ in range(n):
#    A.append(int(input("Введите элемент: ")))
#
#InsertionSort(A)
#
#print("Отсортированный список:", *A)



#2
#def SelectionSort(A):
#    n = len(A)
#    for i in range(n):
#        max_idx = i
#        for j in range(i + 1, n):
#            if A[j] > A[max_idx]:
#                max_idx = j
#        A[i], A[max_idx] = A[max_idx], A[i]
#
#
#A = list(map(int, input("Введите элементы списка: ").split()))
#
#SelectionSort(A)
#
#print("Отсортированный список:", *A)




#3
#def calculate_minimal_amount(prices):
#    prices.sort(reverse=True)
#    
#    total_cost = 0
#    for i in range(len(prices)):
#        if i % 3 != 2:
#            total_cost += prices[i]
#    
#    return total_cost
#
#
#N = int(input("Введите количество товаров: "))
#prices = list(map(int, input("Введите стоимости товаров через пробел: ").split()))
#
#if len(prices) != N:
#    print("Ошибка: количество введенных цен не соответствует N")
#else:
#    minimal_amount = calculate_minimal_amount(prices)
#    print(minimal_amount)




#4
#def find_closest_numbers(nums):
#    nums.sort()
#    
#    min_diff = float('inf')
#    closest_pair = (None, None)
#    
#    for i in range(len(nums) - 1):
#        diff = nums[i + 1] - nums[i]
#        if diff < min_diff:
#            min_diff = diff
#            closest_pair = (nums[i], nums[i + 1])
#    
#    return closest_pair
#
#
#nums = list(map(int, input("Введите числа через пробел: ").split()))
#
#
#
#closest_pair = find_closest_numbers(nums)
#print("Ближайшие числа:", *closest_pair)



#5
#def align_strings(strings):
#    max_length = max(len(s) for s in strings)
#    
#    aligned_strings = ['*' * (max_length - len(s)) + s for s in strings]
#    
#    return aligned_strings, max_length
#
#
#M = int(input("Введите количество строк: "))
#
#strings = [input("Введите строку: ") for _ in range(M)]
#
#aligned_strings, max_length = align_strings(strings)
#
#for s in aligned_strings:
#    print(s)
#print(max_length)







#6
#def balance_sums(arr):
#    sum_positive = sum(x for x in arr if x > 0)
#    sum_negative = sum(x for x in arr if x < 0)
#    
#    required_element = abs(sum_negative) - sum_positive
#    
#    arr.append(required_element)
#    
#    return required_element
#
#
#arr = list(map(int, input("Введите элементы массива через пробел: ").split()))
#
#required_element = balance_sums(arr)
#
#print("Положительная сумма:", sum(x for x in arr if x > 0) - required_element)
#print("Отрицательная сумма:", sum(x for x in arr if x < 0))
#print("Необходимый элемент:", required_element)
#print("Массив после добавления элемента:", arr)




#7
#def extract_domains(email_list):
#    domains = [email.split('@')[1] for email in email_list]
#    return domains
#
#email_list = input("Введите e-mail адреса через пробел: ").split()
#
#domains = extract_domains(email_list)
#print("Домены из списка e-mail адресов:", domains)



#8
#def extract_vowel_words(text):
#    vowels = 'AEIOUaeiou'
#    
#    words = text.split()
#    
#    vowel_words = [word for word in words if word[0] in vowels]
#    
#    return vowel_words
#
#
#text = input("Введите текст: ")
#vowel_words = extract_vowel_words(text)
#
#print("Слова, начинающиеся на гласную букву:", vowel_words)






#9
def delen(text, delimiters):
    split_text = text.split(delimiters[0])
    
    for delimiter in delimiters[1:]:
        temp = []
        for item in split_text:
            temp.extend(item.split(delimiter))
        split_text = temp
    
    split_text = [word for word in split_text if word]
    
    return split_text


text = input("Введите текст: ")

delimiters = [' ', ',', ';', '.']

split_text = delen(text, delimiters)

print("Разбитый текст:", split_text)
